// generate-lucide-icons.js
import fs from 'fs'
import path from 'path'

const vueFiles = []
const iconNames = new Set()

// --- 1. Scan semua file .vue ---
function walk(dir) {
  fs.readdirSync(dir).forEach(file => {
    const fullPath = path.join(dir, file)
    const stat = fs.statSync(fullPath)
    if (stat.isDirectory()) walk(fullPath)
    else if (file.endsWith('.vue')) vueFiles.push(fullPath)
  })
}

// --- 2. Ambil semua <Icon name="..."> ---
function extractIconNames(content) {
  const matches = [...content.matchAll(/<Icon\s+[^>]*name=["']([^"']+)["']/g)]
  for (const match of matches) {
    iconNames.add(match[1])
  }
}

// --- 3. Eksekusi scan ---
walk('./src')
for (const file of vueFiles) {
  const content = fs.readFileSync(file, 'utf-8')
  extractIconNames(content)
}

// --- 4. Filter nama invalid ---
const validName = /^[a-zA-Z0-9_-]+$/
const validIcons = []
const invalidIcons = []

for (const name of iconNames) {
  if (validName.test(name)) {
    validIcons.push(name)
  } else {
    invalidIcons.push(name)
  }
}

if (invalidIcons.length > 0) {
  console.warn(`⚠️ Nama icon invalid di-skip: ${invalidIcons.join(', ')}`)
}

// --- 5. Generate mapEntries ---
const mapEntries = validIcons.map(name => {
  const file = name
    .toLowerCase()
    .replace(/\s+/g, '')
    .replace(/_/g, '-')
  return `'${name}': () => import('lucide-vue-next/icons/${file}.js')`
})

// --- 6. Tulis hasil ke file map ---
const output = `// Auto-generated by generate-lucide-icons.js
export const lucideIconMap = {
  ${mapEntries.join(',\n  ')}
}
`

fs.writeFileSync('./src/utils/lucide-icon-map.js', output)
console.log(`✅ ${validIcons.length} icon valid ditemukan & disimpan ke src/utils/lucide-icon-map.js`)

// --- 7. Selesai ---
console.log('✅ Selesai!')
